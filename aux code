 public static void main(String[] args) {
        int[] array1 = { 8, 100, 9, 4, 14, 13, 22, 6, 20};
        int[] array2 = new int[array1.length];
        //mergeSort(array1, 0, array1.length - 1);

        System.out.println(java.util.Arrays.toString(array1));
        //System.out.println(java.util.Arrays.toString((countingSort(array1, array2, 22))));

        countingSort(array1,array2,100);
    }
 
 
 public static int[] countingSort( int[] A, int[] B, int k ) {

        int[] count = new int[ k + 1 ];

        for (int i = 0; i <= k; i++) {
            count[i] = 0;
        }

        for (int i = 1; i < A.length; i++) {
            count[A[i]]++;
        }
        //System.out.println( "count" + java.util.Arrays.toString(count));

        for (int i = 1; i <= k; i++){
            count[i] += count[i-1];
        }
        //System.out.println( "count1" + java.util.Arrays.toString(count));


        for (int i = A.length-1; i >= 0 ; i--) {
            B[count[A[i]]] = A[i];
            count[A[i]]--;
        }
        System.out.println( "B" + java.util.Arrays.toString(B));

        return B;
    }


private static int findLowerWord(String[] array) {

        int lowerWord = -1;
        boolean first = true;

        for (int i = 0; i < array.length; i++) {

            if ( array[i] != null && !first && array[i].compareTo(array[lowerWord]) < 0) {

                lowerWord = i;
            }

            if (first && array[i] != null) {
                lowerWord = i;
                first = false;
            }
        }

        return lowerWord;
    }
    private static void insertInArray( int[] count, String[] str_array_max, String[] lines, int currentCount, int idxOfLines ) {

        int auxInt;
        String auxString;
        int i;

        count[count.length - 1] = currentCount;

        if (count[MAXWORD - 1] < count[MAXWORD])
            count[MAXWORD - 1] = count[MAXWORD];

        for (i = MAXWORD - 2; i >= 0; i--) {

            if (count[i] < count[i + 1]) {
                auxInt = count[i];
                auxString = str_array_max[i];

                count[i] = count[i + 1];
                str_array_max[i] = str_array_max[i + 1];

                count[i + 1] = auxInt;
                str_array_max[i + 2] = auxString;
            } else break;

        }
        str_array_max[i] = lines[idxOfLines];
    }
